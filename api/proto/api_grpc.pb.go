// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	// ReplicaUpdate
	//
	// Receives a stream of updates, with each item will return a boolean on if the update was successful
	ReplicaUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_ReplicaUpdateClient, error)
	// SyncDataRequest
	//
	// Will send a request to a node to sync all data back to the newly joined node
	SyncDataRequest(ctx context.Context, in *SyncIp, opts ...grpc.CallOption) (RouteGuide_SyncDataRequestClient, error)
	// DictionaryUpdate
	//
	// Will send a stream of data entries that requie an update, will respond with a boolean for each entry sent
	DictionaryUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_DictionaryUpdateClient, error)
	// DataUpdate
	//
	// Will insert the updated data into the node, will return a boolean for each data entry
	DataUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_DataUpdateClient, error)
	// ReplicaDataUpdate
	//
	// Will insert the updated data into the node, will return a boolean for each data entry
	ReplicaDataUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_ReplicaDataUpdateClient, error)
	// GetData
	//
	// Will attempt to get the data from the provided location
	GetData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// DeleteData
	//
	// Will attempt to delete the data from the provided location, will return with a boolean for success status
	DeleteData(ctx context.Context, in *DataArray, opts ...grpc.CallOption) (*Updated, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) ReplicaUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_ReplicaUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[0], "/main.RouteGuide/ReplicaUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideReplicaUpdateClient{stream}
	return x, nil
}

type RouteGuide_ReplicaUpdateClient interface {
	Send(*DataUpdates) error
	Recv() (*Updated, error)
	grpc.ClientStream
}

type routeGuideReplicaUpdateClient struct {
	grpc.ClientStream
}

func (x *routeGuideReplicaUpdateClient) Send(m *DataUpdates) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideReplicaUpdateClient) Recv() (*Updated, error) {
	m := new(Updated)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) SyncDataRequest(ctx context.Context, in *SyncIp, opts ...grpc.CallOption) (RouteGuide_SyncDataRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[1], "/main.RouteGuide/SyncDataRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideSyncDataRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteGuide_SyncDataRequestClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type routeGuideSyncDataRequestClient struct {
	grpc.ClientStream
}

func (x *routeGuideSyncDataRequestClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) DictionaryUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_DictionaryUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[2], "/main.RouteGuide/DictionaryUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideDictionaryUpdateClient{stream}
	return x, nil
}

type RouteGuide_DictionaryUpdateClient interface {
	Send(*DataUpdates) error
	Recv() (*Updated, error)
	grpc.ClientStream
}

type routeGuideDictionaryUpdateClient struct {
	grpc.ClientStream
}

func (x *routeGuideDictionaryUpdateClient) Send(m *DataUpdates) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideDictionaryUpdateClient) Recv() (*Updated, error) {
	m := new(Updated)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) DataUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_DataUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[3], "/main.RouteGuide/DataUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideDataUpdateClient{stream}
	return x, nil
}

type RouteGuide_DataUpdateClient interface {
	Send(*Data) error
	Recv() (*Updated, error)
	grpc.ClientStream
}

type routeGuideDataUpdateClient struct {
	grpc.ClientStream
}

func (x *routeGuideDataUpdateClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideDataUpdateClient) Recv() (*Updated, error) {
	m := new(Updated)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) ReplicaDataUpdate(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_ReplicaDataUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[4], "/main.RouteGuide/ReplicaDataUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideReplicaDataUpdateClient{stream}
	return x, nil
}

type RouteGuide_ReplicaDataUpdateClient interface {
	Send(*Data) error
	Recv() (*Updated, error)
	grpc.ClientStream
}

type routeGuideReplicaDataUpdateClient struct {
	grpc.ClientStream
}

func (x *routeGuideReplicaDataUpdateClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideReplicaDataUpdateClient) Recv() (*Updated, error) {
	m := new(Updated)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) GetData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/main.RouteGuide/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) DeleteData(ctx context.Context, in *DataArray, opts ...grpc.CallOption) (*Updated, error) {
	out := new(Updated)
	err := c.cc.Invoke(ctx, "/main.RouteGuide/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	// ReplicaUpdate
	//
	// Receives a stream of updates, with each item will return a boolean on if the update was successful
	ReplicaUpdate(RouteGuide_ReplicaUpdateServer) error
	// SyncDataRequest
	//
	// Will send a request to a node to sync all data back to the newly joined node
	SyncDataRequest(*SyncIp, RouteGuide_SyncDataRequestServer) error
	// DictionaryUpdate
	//
	// Will send a stream of data entries that requie an update, will respond with a boolean for each entry sent
	DictionaryUpdate(RouteGuide_DictionaryUpdateServer) error
	// DataUpdate
	//
	// Will insert the updated data into the node, will return a boolean for each data entry
	DataUpdate(RouteGuide_DataUpdateServer) error
	// ReplicaDataUpdate
	//
	// Will insert the updated data into the node, will return a boolean for each data entry
	ReplicaDataUpdate(RouteGuide_ReplicaDataUpdateServer) error
	// GetData
	//
	// Will attempt to get the data from the provided location
	GetData(context.Context, *Data) (*Data, error)
	// DeleteData
	//
	// Will attempt to delete the data from the provided location, will return with a boolean for success status
	DeleteData(context.Context, *DataArray) (*Updated, error)
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) ReplicaUpdate(RouteGuide_ReplicaUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method ReplicaUpdate not implemented")
}
func (UnimplementedRouteGuideServer) SyncDataRequest(*SyncIp, RouteGuide_SyncDataRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncDataRequest not implemented")
}
func (UnimplementedRouteGuideServer) DictionaryUpdate(RouteGuide_DictionaryUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method DictionaryUpdate not implemented")
}
func (UnimplementedRouteGuideServer) DataUpdate(RouteGuide_DataUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method DataUpdate not implemented")
}
func (UnimplementedRouteGuideServer) ReplicaDataUpdate(RouteGuide_ReplicaDataUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method ReplicaDataUpdate not implemented")
}
func (UnimplementedRouteGuideServer) GetData(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedRouteGuideServer) DeleteData(context.Context, *DataArray) (*Updated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_ReplicaUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).ReplicaUpdate(&routeGuideReplicaUpdateServer{stream})
}

type RouteGuide_ReplicaUpdateServer interface {
	Send(*Updated) error
	Recv() (*DataUpdates, error)
	grpc.ServerStream
}

type routeGuideReplicaUpdateServer struct {
	grpc.ServerStream
}

func (x *routeGuideReplicaUpdateServer) Send(m *Updated) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideReplicaUpdateServer) Recv() (*DataUpdates, error) {
	m := new(DataUpdates)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_SyncDataRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncIp)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteGuideServer).SyncDataRequest(m, &routeGuideSyncDataRequestServer{stream})
}

type RouteGuide_SyncDataRequestServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type routeGuideSyncDataRequestServer struct {
	grpc.ServerStream
}

func (x *routeGuideSyncDataRequestServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _RouteGuide_DictionaryUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).DictionaryUpdate(&routeGuideDictionaryUpdateServer{stream})
}

type RouteGuide_DictionaryUpdateServer interface {
	Send(*Updated) error
	Recv() (*DataUpdates, error)
	grpc.ServerStream
}

type routeGuideDictionaryUpdateServer struct {
	grpc.ServerStream
}

func (x *routeGuideDictionaryUpdateServer) Send(m *Updated) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideDictionaryUpdateServer) Recv() (*DataUpdates, error) {
	m := new(DataUpdates)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_DataUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).DataUpdate(&routeGuideDataUpdateServer{stream})
}

type RouteGuide_DataUpdateServer interface {
	Send(*Updated) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type routeGuideDataUpdateServer struct {
	grpc.ServerStream
}

func (x *routeGuideDataUpdateServer) Send(m *Updated) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideDataUpdateServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_ReplicaDataUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).ReplicaDataUpdate(&routeGuideReplicaDataUpdateServer{stream})
}

type RouteGuide_ReplicaDataUpdateServer interface {
	Send(*Updated) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type routeGuideReplicaDataUpdateServer struct {
	grpc.ServerStream
}

func (x *routeGuideReplicaDataUpdateServer) Send(m *Updated) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideReplicaDataUpdateServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RouteGuide/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RouteGuide/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).DeleteData(ctx, req.(*DataArray))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _RouteGuide_GetData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _RouteGuide_DeleteData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReplicaUpdate",
			Handler:       _RouteGuide_ReplicaUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncDataRequest",
			Handler:       _RouteGuide_SyncDataRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DictionaryUpdate",
			Handler:       _RouteGuide_DictionaryUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DataUpdate",
			Handler:       _RouteGuide_DataUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReplicaDataUpdate",
			Handler:       _RouteGuide_ReplicaDataUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/api.proto",
}
