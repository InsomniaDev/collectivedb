// https://developers.google.com/protocol-buffers/docs/proto3#nested
// https://developers.google.com/protocol-buffers/docs/overview

// Setup the api
// https://github.com/grpc/grpc-go/blob/master/examples/route_guide/server/server.go

/*
*
* protoc --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
    api/proto/api.proto
*
**/

syntax = "proto3";

package main;

option go_package = "./proto";

// Interface exported by the server.
service RouteGuide {

  // ReplicaUpdate
  // 
  // Receives a stream of updates, with each item will return a boolean on if the update was successful
  rpc ReplicaUpdate(stream DataUpdates) returns (stream Updated) {}

  // SyncDataRequest
  // 
  // Will send a request to a node to sync all data back to the newly joined node
  rpc SyncDataRequest(SyncIp) returns (stream Data) {}

  // DictionaryUpdate
  // 
  // Will send a stream of data entries that requie an update, will respond with a boolean for each entry sent
  rpc DictionaryUpdate(stream DataUpdates) returns (stream Updated) {}

  // DataUpdate
  // 
  // Will insert the updated data into the node, will return a boolean for each data entry
  rpc DataUpdate(stream Data) returns (stream Updated) {}

  // ReplicaDataUpdate
  // 
  // Will insert the updated data into the node, will return a boolean for each data entry
  rpc ReplicaDataUpdate(stream Data) returns (stream Updated) {}

  // GetData
  // 
  // Will attempt to get the data from the provided location
  rpc GetData(Data) returns (Data) {}


  // DeleteData
  // 
  // Will attempt to delete the data from the provided location, will return with a boolean for success status
  rpc DeleteData(DataArray) returns (Updated) {}

}


message DataUpdates {
    CollectiveDataUpdate CollectiveUpdate = 1;
    CollectiveReplicaUpdate ReplicaUpdate = 2;
}

message CollectiveDataUpdate {
    bool update = 1;
    int32 updateType = 2;
    CollectiveData Data = 3;
}

message CollectiveData {
    int32 replicaNodeGroup = 1;
    string dataKey = 2;
    string database = 3;
    repeated string replicatedNodeIds = 4;
}

message CollectiveReplicaUpdate {
    bool update = 1;
    int32 updateType = 2;
    UpdateReplica updateReplica = 3;
}

message UpdateReplica {
    int32 replicaNodeGroup = 1;
    bool fullGroup = 2;
    repeated ReplicaNodes replicaNodes = 3;
    int32 secondaryNodeGroup = 4;
}

message ReplicaNodes {
    string nodeId = 1;
    string ipAddress = 2;
}

message DataArray {
    repeated Data data = 1;
}

message Data {
    string key = 1;
    string database = 2;
    bytes data = 3;
    int32 replicaNodeGroup = 4;
    int32 secondaryNodeGroup = 5;
}

message Updated {
    bool updatedSuccessfully = 1;
    string updatedKey = 2;
}

message SyncIp {
    string ipAddress = 1;
}